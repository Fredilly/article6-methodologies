{
  "files": {
    ".editorconfig": "root = true\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nindent_style = space\nindent_size = 2\n",
    ".env.example": "# Add future keys here. Never commit real secrets.\n",
    ".github/PULL_REQUEST_TEMPLATE.md": "## What changed?\n\n## Why?\n\n## Checks\n- [ ] `nvm use && npm ci || npm install`\n- [ ] `npm run validate` passes\n- [ ] Lockfile updated if `package.json` changed\n- [ ] No secrets added\n\nSigned-off-by: Fred Egbuedike <fredilly@yahoo.com>\n",
    ".github/workflows/semantic.yml": "name: semantic-pull-request\non:\n  pull_request_target:\n    types: [opened, edited, synchronize]\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: amannn/action-semantic-pull-request@v5\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n",
    ".github/workflows/validate.yml": "name: validate\non:\n  push:\n  pull_request:\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n        with:\n          node-version-file: .nvmrc\n      - run: npm ci || npm install\n      - run: npm run validate\n      - name: Generate reports\n        run: |\n          node tools/generate-report.mjs tests/fixtures/AR-AMS0007/sample_ok.geojson > out_ok.json\n          node tools/generate-report.mjs tests/fixtures/AR-AMS0007/sample_fail.geojson > out_fail.json\n      - name: Compare with expected (determinism)\n        run: |\n          node tools/assert-equal.mjs out_ok.json tests/expected/AR-AMS0007/sample_ok.report.json\n          node tools/assert-equal.mjs out_fail.json tests/expected/AR-AMS0007/sample_fail.report.json\n      - name: Hash outputs\n        run: |\n          node tools/compute-hash.mjs out_ok.json\n          node tools/compute-hash.mjs out_fail.json\n",
    ".gitignore": "# Node\nnode_modules/\n.DS_Store\nout/\n",
    ".npmrc": "engine-strict=true\n",
    ".nvmrc": "v20\n",
    "CODEOWNERS": "* @Fredilly\n",
    "CONTRIBUTING.md": "# Contributing\n\n- **Explainable compliance**: each `rules.json` check cites `sections.json#section_id` and PDF page.\n- **Determinism**: Reports follow `contracts/compliance-report.v1.json` and must be byte-identical for the same inputs.\n- **Integrity**: Update `META.json` and `registry/registry.json` on version bumps; include SHA-256 for source docs.\n\n## Dev loop\n```bash\nnvm use\nnpm ci || npm install\nnpm run validate\n```\n\n## New methodology\n- Create `methodologies/<CODE>/{rules.json,META.json,sections.json,source_pdfs/}`\n- Register in `registry/registry.json`\n- Add 2 fixtures + expected reports under `tests/`\n",
    "LICENSE": "MIT License\n\nCopyright (c) 2025 Article6\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "README.md": "# article6-methodologies\n\n[![validate](https://github.com/Fredilly/article6-methodologies/actions/workflows/validate.yml/badge.svg)](https://github.com/Fredilly/article6-methodologies/actions/workflows/validate.yml)\n\nMethodology packs and schemas for the Article6 Automated Carbon Compliance Agent.\n\n## Quick start\n```bash\nnvm use\nnpm ci || npm install\nnpm run validate\n```\n\n## Determinism\nSame inputs â†’ same bytes. Reports conform to `contracts/compliance-report.v1.json`. CI generates reports from fixtures and compares them to `tests/expected`.\n\n## Add a methodology\n1) Create `methodologies/<CODE>/{rules.json,META.json,sections.json,source_pdfs/}`  \n2) Register in `registry/registry.json`  \n3) Add fixtures + expected reports under `tests/`  \n4) `npm run validate`\n",
    "SECURITY.md": "# Security Policy\n- Report vulnerabilities to security@article6.org.\n- Do not include secrets in issues or PRs.\n- Keys must be read from environment variables; never hardcoded.\n",
    "contracts/compliance-report.v1.json": "{\n  \"contract\": \"compliance-report.v1\",\n  \"fields\": {\n    \"methodology_id\": \"string\",\n    \"inputs_hash\": \"sha256(hex)\",\n    \"summary\": {\"status\": \"PASS|FAIL|WARN\", \"area_ha\": \"number\", \"risk_score\": \"0-100 (optional)\"},\n    \"findings\": [{\"check_code\": \"string\", \"status\": \"PASS|FAIL|WARN\", \"note\": \"string\", \"source\": {\"section_id\": \"string\", \"page\": \"int\"}}]\n  }\n}\n",
    "methodologies/AR-AMS0007/META.json": "{\n  \"methodology_id\": \"AR-AMS0007\",\n  \"methodology_version\": \"vX.Y (placeholder)\",\n  \"rule_engine_version\": \"0.1.0\",\n  \"source_docs\": [\n    {\"filename\": \"AR-AMS0007.pdf\", \"sha256\": \"0000000000000000000000000000000000000000000000000000000000000000\", \"url\": \"https://unfccc.int/PLACEHOLDER\"}\n  ]\n}\n",
    "methodologies/AR-AMS0007/rules.json": "{\n  \"id\": \"AR-AMS0007\",\n  \"title\": \"Afforestation/Reforestation small-scale (placeholder)\",\n  \"version\": \"0.1.0\",\n  \"checks\": []\n}\n",
    "methodologies/AR-AMS0007/sections.json": "[\n  {\"section_id\": \"1\", \"title\": \"Applicability conditions\"},\n  {\"section_id\": \"2\", \"title\": \"Project boundary\"},\n  {\"section_id\": \"3\", \"title\": \"Baseline methodology\"},\n  {\"section_id\": \"4\", \"title\": \"Additionality\"},\n  {\"section_id\": \"5\", \"title\": \"Monitoring methodology\"}\n]\n",
    "package.json": "{\n  \"name\": \"article6-methodologies\",\n  \"version\": \"1.2.0\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"main\": \"index.js\",\n  \"engines\": { \"node\": \">=20 <21\" },\n  \"scripts\": {\n    \"test\": \"echo \\\"No tests yet\\\"\",\n    \"check:json\": \"node -e \\\"JSON.parse(require('fs').readFileSync(process.argv[1],'utf8')); console.log('OK', process.argv[1])\\\"\",\n    \"validate:quick\": \"npm run check:json -- schema/rules.schema.json && npm run check:json -- schema/meta.schema.json && npm run check:json -- schema/report.schema.json && npm run check:json -- contracts/compliance-report.v1.json && npm run check:json -- methodologies/AR-AMS0007/rules.json && npm run check:json -- methodologies/AR-AMS0007/META.json && npm run check:json -- methodologies/AR-AMS0007/sections.json\",\n    \"validate:ajv\": \"node tools/validate.mjs\",\n    \"validate\": \"npm run validate:quick && npm run validate:ajv\",\n    \"report:gen\": \"node tools/generate-report.mjs\",\n    \"hash\": \"node tools/compute-hash.mjs\"\n  },\n  \"devDependencies\": {\n    \"ajv\": \"^8.12.0\"\n  }\n}\n",
    "registry/registry.json": "{\n  \"methodologies\": [\n    {\n      \"id\": \"AR-AMS0007\",\n      \"title\": \"Afforestation/Reforestation small-scale (placeholder)\",\n      \"status\": \"draft\",\n      \"paths\": {\n        \"rules\": \"methodologies/AR-AMS0007/rules.json\",\n        \"meta\": \"methodologies/AR-AMS0007/META.json\",\n        \"sections\": \"methodologies/AR-AMS0007/sections.json\"\n      }\n    }\n  ]\n}\n",
    "schema/meta.schema.json": "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Methodology Meta\",\n  \"type\": \"object\",\n  \"required\": [\"methodology_id\", \"methodology_version\", \"rule_engine_version\", \"source_docs\"],\n  \"properties\": {\n    \"methodology_id\": {\"type\": \"string\"},\n    \"methodology_version\": {\"type\": \"string\"},\n    \"rule_engine_version\": {\"type\": \"string\"},\n    \"source_docs\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"filename\", \"sha256\", \"url\"],\n        \"properties\": {\n          \"filename\": {\"type\": \"string\"},\n          \"sha256\": {\"type\": \"string\", \"pattern\": \"^[a-f0-9]{64}$\"},\n          \"url\": {\"type\": \"string\", \"format\": \"uri\"}\n        }\n      }\n    }\n  }\n}\n",
    "schema/report.schema.json": "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Compliance Report v1\",\n  \"type\": \"object\",\n  \"required\": [\"contract\", \"methodology_id\", \"inputs_hash\", \"summary\", \"findings\"],\n  \"properties\": {\n    \"contract\": {\"const\": \"compliance-report.v1\"},\n    \"methodology_id\": {\"type\": \"string\"},\n    \"inputs_hash\": {\"type\": \"string\", \"pattern\": \"^[a-f0-9]{64}$\"},\n    \"summary\": {\"type\": \"object\", \"required\": [\"status\", \"area_ha\"], \"properties\": {\"status\": {\"enum\": [\"PASS\", \"FAIL\", \"WARN\"]}, \"area_ha\": {\"type\": \"number\"}, \"risk_score\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100}}},\n    \"findings\": {\"type\": \"array\", \"items\": {\"type\": \"object\", \"required\": [\"check_code\", \"status\", \"source\"], \"properties\": {\"check_code\": {\"type\": \"string\"}, \"status\": {\"enum\": [\"PASS\", \"FAIL\", \"WARN\"]}, \"note\": {\"type\": \"string\"}, \"source\": {\"type\": \"object\", \"required\": [\"section_id\", \"page\"], \"properties\": {\"section_id\": {\"type\": \"string\"}, \"page\": {\"type\": \"integer\"}}}}}}\n  }\n}\n",
    "schema/rules.schema.json": "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"title\": \"Methodology Rules\",\n  \"type\": \"object\",\n  \"required\": [\"id\", \"title\", \"version\", \"checks\"],\n  \"properties\": {\n    \"id\": {\"type\": \"string\"},\n    \"title\": {\"type\": \"string\"},\n    \"version\": {\"type\": \"string\"},\n    \"checks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"code\", \"desc\", \"type\", \"params\", \"source\"],\n        \"properties\": {\n          \"code\": {\"type\": \"string\"},\n          \"desc\": {\"type\": \"string\"},\n          \"type\": {\"type\": \"string\"},\n          \"params\": {\"type\": \"object\"},\n          \"source\": {\n            \"type\": \"object\",\n            \"required\": [\"section_id\", \"page\"],\n            \"properties\": {\n              \"section_id\": {\"type\": \"string\"},\n              \"page\": {\"type\": \"integer\"}\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    "tests/expected/AR-AMS0007/sample_fail.report.json": "{\n  \"contract\": \"compliance-report.v1\",\n  \"methodology_id\": \"AR-AMS0007\",\n  \"inputs_hash\": \"PLACEHOLDER\",\n  \"summary\": { \"status\": \"WARN\", \"area_ha\": 0, \"risk_score\": 0 },\n  \"findings\": []\n}\n",
    "tests/expected/AR-AMS0007/sample_ok.report.json": "{\n  \"contract\": \"compliance-report.v1\",\n  \"methodology_id\": \"AR-AMS0007\",\n  \"inputs_hash\": \"PLACEHOLDER\",\n  \"summary\": { \"status\": \"WARN\", \"area_ha\": 0, \"risk_score\": 0 },\n  \"findings\": []\n}\n",
    "tests/fixtures/AR-AMS0007/sample_fail.geojson": "{ \"type\": \"FeatureCollection\", \"features\": [] }\n",
    "tests/fixtures/AR-AMS0007/sample_ok.geojson": "{ \"type\": \"FeatureCollection\", \"features\": [] }\n",
    "tools/assert-equal.mjs": "#!/usr/bin/env node\nimport fs from \"fs\";\nconst a = process.argv[2];\nconst b = process.argv[3];\nif (!a || !b) { console.error(\"Usage: node tools/assert-equal.mjs <actual.json> <expected.json>\"); process.exit(1); }\nconst ja = JSON.parse(fs.readFileSync(a, \"utf8\"));\nconst jb = JSON.parse(fs.readFileSync(b, \"utf8\"));\nconst stable = (v) => JSON.stringify(v, Object.keys(v).sort(), 2);\nif (stable(ja) !== stable(jb)) { console.error(\"JSON mismatch:\", a, b); process.exit(1); }\nconsole.log(\"OK:\", a, \"matches\", b);\n",
    "tools/compute-hash.mjs": "#!/usr/bin/env node\nimport fs from \"fs\";\nimport crypto from \"crypto\";\nconst p = process.argv[2];\nif (!p) { console.error(\"Usage: node tools/compute-hash.mjs <file>\"); process.exit(1); }\nconst buf = fs.readFileSync(p);\nconst h = crypto.createHash(\"sha256\").update(buf).digest(\"hex\");\nconsole.log(h);\n",
    "tools/generate-report.mjs": "#!/usr/bin/env node\nimport fs from \"fs\";\nimport crypto from \"crypto\";\nconst inPath = process.argv[2];\nif (!inPath) { console.error(\"Usage: node tools/generate-report.mjs <geojson>\"); process.exit(1); }\nconst geo = fs.readFileSync(inPath, \"utf8\");\nconst inputs_hash = crypto.createHash(\"sha256\").update(geo).digest(\"hex\");\nconst out = {\n  contract: \"compliance-report.v1\",\n  methodology_id: \"AR-AMS0007\",\n  inputs_hash,\n  summary: { status: \"WARN\", area_ha: 0, risk_score: 0 },\n  findings: []\n};\nprocess.stdout.write(JSON.stringify(out, null, 2));\n",
    "tools/validate.mjs": "#!/usr/bin/env node\nimport fs from \"fs\";\nimport path from \"path\";\nimport Ajv from \"ajv\";\nconst ajv = new Ajv({ allErrors: true });\nconst load = (p) => JSON.parse(fs.readFileSync(p, \"utf8\"));\nconst root = process.cwd();\nconst rulesSchema = load(path.join(root, \"schema/rules.schema.json\"));\nconst metaSchema  = load(path.join(root, \"schema/meta.schema.json\"));\nconst reportSchema = load(path.join(root, \"schema/report.schema.json\"));\nconst entries = load(path.join(root, \"registry/registry.json\")).methodologies;\nfor (const m of entries) {\n  const rules = load(path.join(root, m.paths.rules));\n  const meta  = load(path.join(root, m.paths.meta));\n  const vr = ajv.compile(rulesSchema)(rules);\n  if (!vr) { console.error(\"RULES INVALID:\", m.id); process.exit(1); }\n  const vm = ajv.compile(metaSchema)(meta);\n  if (!vm) { console.error(\"META INVALID:\", m.id); process.exit(1); }\n}\nconsole.log(\"OK: schemas valid\");\n"
  }
}
